<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>g Heavy Industries</title>
    <description>Guides for gBoards
</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sat, 30 Mar 2019 13:14:00 -0600</pubDate>
    <lastBuildDate>Sat, 30 Mar 2019 13:14:00 -0600</lastBuildDate>
    <generator>Jekyll v3.7.4</generator>
    
      <item>
        <title>Unboxing Georgi</title>
        <description>&lt;h1 id=&quot;unboxing-georgi&quot;&gt;Unboxing Georgi&lt;/h1&gt;
&lt;p&gt;Congrats on the purchase of your Georgi! Let’s get the little guy all set up.&lt;/p&gt;

&lt;p&gt;In your package you should have a little note from me, the two halves of Georgi and any cables you may have ordered. If you didn’t order cables from me you will need a MiniUSB and a TRRS cable (Looks like a headphone connector, but has 4 gold bands instead of 3!).&lt;/p&gt;

&lt;p&gt;Now go ahead and plug everything in! Be gentle one the cabling for the first few inserts as it can be a little tight until it wears in. Plug it into your computer and fire up Plover, open your machine settings, scan and select the correct serial port. That’s it!&lt;/p&gt;

&lt;p&gt;Your board is now ready for use with Plover, but you might accidentally toggle a few modes that are inside of Georgi, so let’s go over them.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Remember! If you have issues, unplugging your board and plugging it in will reset to a clean state.&lt;/strong&gt;&lt;/p&gt;

&lt;h1 id=&quot;modes&quot;&gt;Modes&lt;/h1&gt;
&lt;p&gt;Georgi has three operation modes: Steno, QWERTY and Command.&lt;/p&gt;

&lt;p&gt;Lets start with Steno. If you’re using a Georgi you’re probably familiar with this already. &lt;a href=&quot;https://www.artofchording.com/&quot;&gt;If not, The Art Of Chording has you covered.&lt;/a&gt;.
&lt;img src=&quot;/img/georgi/steno.png&quot; alt=&quot;steno layout&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The QWER button toggles QWERTY mode, if you ever accidentally can’t type you probably hit that.
The SYMB button is a Momentary hold for symbols, you have to hold it while inserting them!&lt;/p&gt;

&lt;p&gt;We’ll go on about that later but for now know that you can hold either of those in steno mode for fingerspelling of inserting symbols!&lt;/p&gt;

&lt;p&gt;QWERTY mode is the main mode you’ll be in if you’re not doing steno 24/7. Here’s the keymap
&lt;img src=&quot;/img/georgi/qwerty.png&quot; alt=&quot;qwerty layout&quot; /&gt;
Pretty similar to a standard QWERTY eh? The markings along a crack denote pushing both of those keys in a chord, blue dot is for the four centered around it. The main difference between this and a normal board is that a traditional keyboard sends keypresses as they’re depressed, this one send the key only after the chord has been stroked!&lt;/p&gt;

&lt;p&gt;It’s a little weird and may take a few days to get used to the timing difference. Stick with it. 
The numbers can be accessed from QWER mode by simply holding num.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/georgi/symbol.png&quot; alt=&quot;symbols layer&quot; /&gt;
The symbols layer is accessed by holding down the Symbol key and cannot be switched to. Some of these keys can be shifted just like their QWERTY counterparts and to do that hold the right shift key! The number layer is accessed by holding the number key while pressing the key. Usually it’s easier to insert numbers directly from the QWERTY layer!&lt;/p&gt;

&lt;p&gt;There are a few other ‘layers’ as well, the coloured keys are the prefix for the chord!
There are some chords tucked away on the thumbs as well on the bottom :)
&lt;img src=&quot;/img/georgi/move.png&quot; alt=&quot;movement layer&quot; /&gt;
&lt;img src=&quot;/img/georgi/function.png&quot; alt=&quot;function layer&quot; /&gt;
&lt;img src=&quot;/img/georgi/media.png&quot; alt=&quot;media layer&quot; /&gt;
&lt;img src=&quot;/img/georgi/thumbs.png&quot; alt=&quot;thumbs&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;fallbacks&quot;&gt;Fallbacks&lt;/h1&gt;

&lt;p&gt;Georgi uses GeminiPR for serial communication, this is what allows you to quickly toggle back and forth between Plover and QWERTY input. However this isn’t always an option (work machine, limited environment, etc). So for these kind of situations the Steno layout can be used as a simple NKRO keyboard for plover. If you need this, remember to have a stroke for enabling/disabling plover in your dictionaries! Otherwise when you switch to QWERTY mode, plover will still be active!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/georgi/fallback.png&quot; alt=&quot;fallback&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;command-mode&quot;&gt;Command Mode&lt;/h1&gt;

&lt;p&gt;Due to the size of the board, key combos can be a pain if there is a conflict. What do you do when the key you’re trying to chord overlaps with another that you need? Enter Command mode. Command mode buffers all of the keys that are pressed while it’s active, once you exit command mode the keys are all pressed down, and then released in one go. So inserting say ‘Ctrl+Shift+S’ could bbe done in the following way ‘Command Mode/Ctrl/Shift/S/Command Mode’.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/georgi/command.png&quot; alt=&quot;Command&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Note: There are a good number of alternative binds for modifiers and you can always add definitions to your firmware! If you find a bind that you’re using frequently, don’t just whack it in over and over again in command mode, add it to your keyboard, find a alternate way to stroke it or use plover to bridge the gap!&lt;/p&gt;

&lt;h1 id=&quot;entering-qmk-gaming-mode&quot;&gt;Entering QMK (Gaming mode)&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;/img/georgi/gaming.png&quot; alt=&quot;Command&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Pressing this chord will move to the next avalible QMK layer (or do nothing if you only have the steno layer). This layer acts like a traditional keyboard as opposed to stenotype. On this layer are your traditional WASD and a momentary layer for numbers/lower qwerty. To return to steno press the right number key.&lt;/p&gt;

&lt;h1 id=&quot;protips&quot;&gt;Protips&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;Do yourself a favour and print off the &lt;a href=&quot;/img/georgi/keymap.png&quot;&gt;keyboard map&lt;/a&gt; and leave it by your desk. This little guy is a radical departure from usual keyboards and with any new map, it’s going to take some getting used to. Looking stuff up is to be expected for the first bit and getting used to the keyboard itself is going to take a while even for existing stenographers!&lt;/li&gt;
  &lt;li&gt;You can do temporary plover from QWERTY, If you hold the STENO button in your chord, Use this for sending shortcuts to plover for binds and other stuff.&lt;/li&gt;
  &lt;li&gt;Similarity you can do temporary QWERTY fingerspells from steno! Hold the steno button while you’re typing.&lt;/li&gt;
  &lt;li&gt;Keyup will take time to get used to! Seriously, you’re used to typing on a traditional keyboard, this will mess you up for a bit.&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sun, 10 Mar 2019 00:00:00 -0600</pubDate>
        <link>http://localhost:4000/Unboxing-Georgi</link>
        <guid isPermaLink="true">http://localhost:4000/Unboxing-Georgi</guid>
        
        <category>Georgi</category>
        
        
      </item>
    
      <item>
        <title>Configuring Georgi</title>
        <description>&lt;h1 id=&quot;georgi-configuration&quot;&gt;Georgi Configuration&lt;/h1&gt;

&lt;p&gt;Awesome, now that you’ve figured out the convoluded shitshow that is Georgi, let’s get on making it usable for you! A little foreword is necessary here, if you’ve used QMK before, Georgi does some very unQMK things.&lt;/p&gt;

&lt;h1 id=&quot;the-future&quot;&gt;The Future&lt;/h1&gt;
&lt;p&gt;We’re currently working with the QMK team to develop a front end that is compatible with the &lt;a href=&quot;http://config.qmk.fm&quot;&gt;QMK configurator&lt;/a&gt;. Once this is done configuring Georgi or other steno boards from the browser will be possible. Until then, we need to set up the build environment. &lt;a href=&quot;https://github.com/qmk/qmk_firmware/blob/master/docs/getting_started_build_tools.md&quot;&gt;So give this a diddle and come on back.&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&quot;structure-of-a-keymap&quot;&gt;Structure of a keymap&lt;/h1&gt;
&lt;p&gt;Good on you for getting that all set up!&lt;/p&gt;

&lt;p&gt;Take a second to familarize yourself with this &lt;a href=&quot;https://github.com/germ/qmk_firmware/blob/georgi/keyboards/georgi/keymaps/default/keymap.c&quot;&gt;example keymap&lt;/a&gt;. Look a little funky? I told you it would be a little weird.&lt;/p&gt;

&lt;p&gt;Let’s start with the entry point will be called during processing, &lt;strong&gt;processQwerty()&lt;/strong&gt; is called anytime a Symbol or Qwerty button is to be looked up. The easiest way to think of this is as a small dictionary onboard your keyboard. In steno mode we just send the steno chords, in Qwerty mode we perform a lookup against this list. That’s literally it (for now anyway).&lt;/p&gt;

&lt;p&gt;There are two parts to every entry a trigger and an action.&lt;/p&gt;

&lt;h1 id=&quot;triggers&quot;&gt;Triggers&lt;/h1&gt;
&lt;p&gt;A trigger looks like this ‘LSD | LK | LW | LR’, the pipe character is used to glue the various keys together. The first letter is the side of the board, the second the steno key it corresponds to, the exception is LSUp, LSDown, and LFT (as LT is already defined). A list is provided below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/georgi/defines.png&quot; alt=&quot;georgi keymap&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We will talk about triggers in a little bit again.&lt;/p&gt;

&lt;h1 id=&quot;actions&quot;&gt;Actions&lt;/h1&gt;
&lt;p&gt;One a trigger is matched a action is taken. Any valid C code can be in there, but usually you’ll want to use the &lt;strong&gt;SEND()&lt;/strong&gt; function to press keys from the &lt;a href=&quot;https://github.com/qmk/qmk_firmware/blob/master/docs/keycodes.md&quot;&gt;QMK Keycode List&lt;/a&gt; or use SEND_STRING() to &lt;a href=&quot;https://github.com/qmk/qmk_firmware/blob/master/docs/feature_macros.md&quot;&gt;output some text&lt;/a&gt;. SEND_STRING can also be used to send modifiers such as control, push buttons, delay and all sorts of fun stuff. A good idea is to try a small modification to a existing action before going insane :)&lt;/p&gt;

&lt;h1 id=&quot;callers&quot;&gt;Callers&lt;/h1&gt;
&lt;p&gt;There are two different callers that can respond to a chord P (Press) and PJ (Press Non Jumping). The dictionary is looked up from the top top the bottom, on the first match it finds it runs the action and may halt further processing.&lt;/p&gt;

&lt;p&gt;P will execute a action and halt further processing. P only works on an exact match, so any partial chords are ignored.&lt;/p&gt;

&lt;p&gt;PJ will remove it’s trigger from a chord once it’s found, and add it’s presses to the the output. Typically PJ is used for modifiers such as shift, control, etc. Due to the nature of it, anything that relys on matching a chord that will be removed by a matching partial chord must be placed before any conflicting PJs. Due to this the typical structure is&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Conflicting Chords&lt;/li&gt;
  &lt;li&gt;Modifiers/PJs&lt;/li&gt;
  &lt;li&gt;Whole bunch of Ps&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;layers&quot;&gt;Layers&lt;/h1&gt;
&lt;p&gt;Unlike normal QMK boards, we can get away with only using a single layer and prefixing the chords. This is done by a few defines at the top like so &lt;code class=&quot;highlighter-rouge&quot;&gt;#define FUNCTION (LSU | LSD | ST3)&lt;/code&gt;.&lt;/p&gt;

&lt;h1 id=&quot;special-handling&quot;&gt;Special Handling&lt;/h1&gt;
&lt;p&gt;The toggles that control switching modes and all that are hardcoded. To modify these you need to jigger sten.h.&lt;/p&gt;

&lt;p&gt;Have fun!&lt;/p&gt;
</description>
        <pubDate>Sat, 09 Mar 2019 00:00:00 -0600</pubDate>
        <link>http://localhost:4000/Configuring-Georgi</link>
        <guid isPermaLink="true">http://localhost:4000/Configuring-Georgi</guid>
        
        <category>Georgi</category>
        
        
      </item>
    
      <item>
        <title>Hacking Georgi</title>
        <description>&lt;h1 id=&quot;hacking-georgi&quot;&gt;Hacking Georgi&lt;/h1&gt;
&lt;p&gt;Alright, so you’ve finally found something that you can’t do from the default firmware. A bit of heads up here you’re going to need to know some QMK internals so &lt;a href=&quot;https://beta.docs.qmk.fm/for-a-deeper-understanding/understanding_qmk&quot;&gt;give this excellent guide a read&lt;/a&gt; and come on back.&lt;/p&gt;

&lt;h3 id=&quot;how-georgi-do&quot;&gt;How Georgi Do&lt;/h3&gt;
&lt;p&gt;Pop open sten.h so you have a reference to use. Everything that Georgi does is independant of QMK proper and happens in here and processQwerty() in the keymap. The current chord state is held in a cChord. We hook &lt;code class=&quot;highlighter-rouge&quot;&gt;process_steno_user&lt;/code&gt; to update this chord as keys come in and hook &lt;code class=&quot;highlighter-rouge&quot;&gt;send_steno_chord_user&lt;/code&gt; to process everything once the keys are up. If none of our actions match we return true and continue processing (QMK will then send the steno codes).&lt;/p&gt;

&lt;h3 id=&quot;cchord&quot;&gt;cChord&lt;/h3&gt;
&lt;p&gt;This is just a bigass bitfield that is set in &lt;code class=&quot;highlighter-rouge&quot;&gt;process_steno_user&lt;/code&gt; we can add keys to this easily but there are a total maximum of 32 possible states we can jam in there. To define your own codes append a entry to the ORDER enum, make a nice pretty #define for it and start adding entries to your keymap.&lt;/p&gt;

&lt;h3 id=&quot;key-repeat&quot;&gt;Key Repeat&lt;/h3&gt;
&lt;p&gt;Once the first button press comes in we start a timer and keep checking it in &lt;code class=&quot;highlighter-rouge&quot;&gt;matrix_scan_user&lt;/code&gt;, if this timer expires we send the lookup the current chords and reset the timer.&lt;/p&gt;

&lt;h3 id=&quot;mouse-keys&quot;&gt;Mouse Keys&lt;/h3&gt;
&lt;p&gt;Mousekeys are done using the repeat mechanism, if a mousepress is sent it will remain in a down state until the chord is sent. The button that is clicked is selected from &lt;a href=&quot;https://github.com/qmk/qmk_firmware/blob/master/docs/keycodes.md#mouse-keys&quot;&gt;this list here&lt;/a&gt;. We do this with the clickMouse() function, if the chord is too short to register a repeat a single click is generated.&lt;/p&gt;

&lt;h3 id=&quot;send&quot;&gt;Send&lt;/h3&gt;
&lt;p&gt;Send is just a light wrapper around register_code(), this is needed to buffer if we are in command mode. Just like register_code() Quantum Codes cannot be used here. You need to use SEND otherwise command mode won’t work!&lt;/p&gt;

&lt;h3 id=&quot;command-mode&quot;&gt;Command mode&lt;/h3&gt;
&lt;p&gt;The buffer can store up to 20 different keypresses (if you somehow need more, update &lt;strong&gt;REP_DELAY&lt;/strong&gt;). The way we do this is by wrapping &lt;strong&gt;register_code()&lt;/strong&gt; with send and replaying the buffer depressing every key in the sequence before key up. This only applies to wrapped codes so things like mouse clicks and custom code won’t be in there.&lt;/p&gt;

&lt;h3 id=&quot;qwerty-fallback&quot;&gt;QWERTY Fallback&lt;/h3&gt;
&lt;p&gt;proessFakeSteno() simply maps chords to NKRO Plover as a fallback mode. Ideally we would have a datastructure for various dictionaries but switching the called look up table seems to be fine. This is a young project, submit a PR.&lt;/p&gt;

&lt;h3 id=&quot;adding-functionality&quot;&gt;Adding functionality&lt;/h3&gt;
&lt;p&gt;All of the logic happens in &lt;strong&gt;process_steno_chord_user&lt;/strong&gt;, this should be your main place to add/augment functionality. In here you can preprocess chords before passing them off for handling, enable toggles and disable features, etc. You need to remember that just like in any dictionary, there is a order that everything is evaluated in, so be careful.&lt;/p&gt;

&lt;p&gt;Two exit points are provided to jump to, &lt;strong&gt;out&lt;/strong&gt; which halts further processing and cleans up, and &lt;strong&gt;steno&lt;/strong&gt; which will clean up and pass of the chords to Plover. Local gotos are okay, get at me.&lt;/p&gt;

&lt;h3 id=&quot;other-qmk-jazz&quot;&gt;Other QMK jazz&lt;/h3&gt;
&lt;p&gt;There’s a ton of stuff that can be leveraged here. Take a look through the tmk/common folder for some ideas and weird whacky keyboards you see around. This is a computer, make it do weird shit! If you need a hand reach out, I’ll warn you I suck at steno though.&lt;/p&gt;
</description>
        <pubDate>Fri, 08 Mar 2019 00:00:00 -0600</pubDate>
        <link>http://localhost:4000/Hacking-Georgi</link>
        <guid isPermaLink="true">http://localhost:4000/Hacking-Georgi</guid>
        
        <category>Georgi</category>
        
        
      </item>
    
      <item>
        <title>Gergo Setup</title>
        <description>&lt;h1 id=&quot;gergo-setup&quot;&gt;Gergo Setup&lt;/h1&gt;

&lt;p&gt;Alright! Now we’re really getting into it!&lt;/p&gt;

&lt;p&gt;If you’ve ordered a Gergo: Ready, it’s all ready to go. With the default
keymap. For customization skip down to the Configuring
Gergo section.&lt;/p&gt;

&lt;p&gt;If you have a Gergo: Partial all you need to do is solder in your switches, there’s already a firmware loaded! Just be careful when installing PCB mount switches, be sure to support the board when inserting. Here’s a video on &lt;a href=&quot;https://www.youtube.com/watch?v=cRJV1jo5vao&quot;&gt;how to solder them.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After that skip on down to the Configuring Gergo section.&lt;/p&gt;

&lt;p&gt;Gergo: Kit Assembly&lt;/p&gt;

&lt;p&gt;IMAGES HERE: &lt;a href=&quot;https://github.com/germ/GergoDocs&quot;&gt;https://github.com/germ/GergoDocs&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;First and formost, I need you to take a nice deep breath. This is going to look like a lot and can be daunting! Trust me with a bit of videos and patience you can do it. Remember, this is a learning experience!&lt;/p&gt;

&lt;p&gt;If you’ve never worked with SMD before sit down and give &lt;a href=&quot;https://www.youtube.com/watch?v=b9FC9fAlfQE&amp;amp;list=PL2862BF3631A5C1AA&quot;&gt;this video&lt;/a&gt; a watch.&lt;/p&gt;

&lt;p&gt;Reccommended tools: Conical or chisel tip, flux, 0.8mm 37/63 solder, tweezers, desoldering braid, temperture controlled iron.&lt;/p&gt;

&lt;p&gt;If you haven’t watched that video, watch it again. Because I’m not telling you exactly what to do here.&lt;/p&gt;

&lt;p&gt;Before we do anything at all we need to clean up the board! Grab a dremel or sandpaper and smooth out the rat bites on the edge of the PCB. Wear a mask!&lt;/p&gt;

&lt;h3 id=&quot;diodes&quot;&gt;Diodes&lt;/h3&gt;
&lt;p&gt;We’re going to work easiest to hardest, so let’s start with the diodes. Grab them and carefully empty them into a bowl, tin the pad with a bit of solder and orientate your diode. You’re going to line these guys up under every key switch. You can tell which components are diodes by their irregular pad shape.&lt;/p&gt;

&lt;p&gt;Just line up the line on the top of your diode with the square pad on your PCB. After you have it lined up, heat the tinned pad slide the diode into place and remove the iron. Give it a second to cool and solder the other side. Easy!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;MDF PROTIP&lt;/strong&gt;: Tin all the square pads before you start. Then heat and slide the diodes into position, finally finish up on the other side!&lt;/p&gt;

&lt;h3 id=&quot;caps&quot;&gt;Caps&lt;/h3&gt;
&lt;p&gt;Next up are the capacitors, They’re the little brown guys with no markings. You have three types in this kit.&lt;/p&gt;

&lt;p&gt;2x 22pf,  1x 1uf, 5x0.1uF&lt;/p&gt;

&lt;p&gt;The two 22pF caps are labelled and located by the Oscillator, 1uF by the MCU and labelled, and the reset are dotted around the board. Most are labelled 0.1uF, If you see C5 or C6, those are also 0.1uF caps. Install them just like you did with the diodes, orientation does not matter.&lt;/p&gt;

&lt;h3 id=&quot;resistors&quot;&gt;Resistors&lt;/h3&gt;
&lt;p&gt;Next up resistors, you’ve got 3 kinds 10K (103), 2.2K (222) 22Ohms  (22R0). Take a look on the silk screen for them and whack em in there! They will all be near the MCU or  USB port.If you see R1 on your board that’s supposed to be a 2.2K resistor!&lt;/p&gt;

&lt;h3 id=&quot;osc&quot;&gt;Osc&lt;/h3&gt;
&lt;p&gt;The little recangular guy with four pads is the oscillator, it’s a bit of a pain to solder on to be honest. Orientation doesn’t matter here, but you’ll tin one pad and slide the oscillator into place. After that get the other three legs soldered. Be careful to use as little solder as possible as this guy loves to form solder bridges! Use a continuity tester to be sure. Solder has a way of finding itself on top of the part as well, so you may need to wick that away. Note if you’re probing around in there &lt;a href=&quot;https://raw.githubusercontent.com/germ/GergoDocs/master/img/2.png&quot;&gt;these diagonal pads are connected to each other&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;ics&quot;&gt;ICs&lt;/h3&gt;
&lt;p&gt;Lastly the hard stuff! Remember if you mess up, you can order more electronics from the store!&lt;/p&gt;

&lt;p&gt;So you should have a few components left, we’re going to start with the MCP (rectangular one). There is a small circle on your PCB and a circle on the IC. Line these up.&lt;/p&gt;

&lt;p&gt;Tin a pad on the top corner of it’s pads, heat and align the pins. Be careful! Too much force and you will bend a pin, too long with the iron and you may damage the chip! After it’s aligned do the same to a corner pin on the other side of the board. Apply flux to the contacts and put some solder on the end of your iron. Do one pin at a time waiting until the solder has flowed before moving onto the next. Remember to check the warmth of the chip periodically! Check the pins for solder bridges and reflow/wick solder as necessary. You should be able to see gaps between the pins when viewed from the side.&lt;/p&gt;

&lt;p&gt;Repeat the same on the MCU. There was a oversight on the silkscreen a bit of background makes it look like there are two places of pin 1. The correct placement of the dot is towards the switches. &lt;a href=&quot;https://cdn.pbrd.co/images/HTQG2is.jpg&quot;&gt;&lt;strong&gt;Here is a image, don’t fuck this up&lt;/strong&gt;&lt;/a&gt;. Also one batch of PCBs has a huge circle instead of a tiny marker, &lt;a href=&quot;https://raw.githubusercontent.com/germ/GergoDocs/master/img/26.png&quot;&gt;so if you don’t see something like this&lt;/a&gt;, that giant curved line is supposed to be that tiny circle. Line it up with that image.&lt;/p&gt;

&lt;h3 id=&quot;connectors&quot;&gt;Connectors&lt;/h3&gt;
&lt;p&gt;Assuming you’ve done everything correctly all that is left is the simple stuff! Attach the TRRS jacks using a good amount of solder, same for MiniUSB and the reset switch. Use flux for  the MiniUSB port and be careful of bridging. If you have problems a little tip is to remove or bend the rear casing using a pair of flush cutters. It just makes getting into position much easier. Be sure to wick out any solder bridges.&lt;/p&gt;

&lt;h3 id=&quot;programmingtesting&quot;&gt;Programming/Testing&lt;/h3&gt;
&lt;p&gt;Alright, we’re in the homestretch. Go off and install these &lt;a href=&quot;https://sourceforge.net/projects/dfu-programmer/files/dfu-programmer/0.7.0/&quot;&gt;drivers&lt;/a&gt; or install dfu-programmer from your repo. We’re going to need them after we run through a checklist.&lt;/p&gt;

&lt;p&gt;1) Are there any empty pads on the board?&lt;/p&gt;

&lt;p&gt;2 ) Can you see any solder bridges between pins?&lt;/p&gt;

&lt;p&gt;3)  Unsoldered all pads on any component?&lt;/p&gt;

&lt;p&gt;4) Any diodes in the wrong orientation?&lt;/p&gt;

&lt;p&gt;If you answered No to every one of those you’re ready to test! Install those drivers and reboot if you’re a Windows user. If you’ve done everything correctly you should see a Atmel device in Device Manager! Linux users: Run lsusb as root ( watch -n 1 lsusb ). If so, congrats, you’ve done it. Proceed to Install your switches and proceed to configuring Gergo!&lt;/p&gt;

&lt;p&gt;If you don’t see your device&lt;/p&gt;

&lt;p&gt;If you don’t see a device, that means you did something wrong. Step back, take a breather. Grab a coffee. Leave the board for a while.&lt;/p&gt;

&lt;p&gt;Done that? Good. It’s the best advice. Now let’s check some things. We’re going to work backwards from the USB port to the microcontroller.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;If you plug it into your USB port and another device on the same bus shuts down&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;That’s a short. You’ll need to find it and eliminate it, most likely a solder bridge somewhere. If your TRRS cable is connected, disconnect it and see if that solves it.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;If you probe around the MCU and don’t see any voltage.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Most likely a problem connecting the USB port, check the solder connections. Might be a good idea to check the orientation of any nearby diodes&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Voltage on the MCU, but not showing in Device Manager&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Double check your oscillator connections. If you can’t get it to work apply a bunch of solder and gently push it off the board, clean up the board with wick and resolder the oscillator.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Something wonky is happening?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You probably have a unconnected component somewhere. Double check your connections&lt;/p&gt;

&lt;p&gt;Still stuck?  It might be time to take your board by the local hackerspace. they might be able to help you at their next open house. Otherwise hop into #kb-ergo on the mech keys discord and send me a message.&lt;/p&gt;

&lt;h1 id=&quot;building-the-trackball&quot;&gt;Building The Trackball&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=Q4Fka2BuQ8c&quot;&gt;&lt;strong&gt;Due to popular request, I made a build video over here.&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The first thing I want you to do is to asses if you can build this thing, it’s small, finicky and a pain in the ass. That being said now is a good time to asses if you’d rather pop a MX switch in there. This revision is a touch janky and jittery due to the low amount of resolution on the sensors!&lt;/p&gt;

&lt;p&gt;Stil want to do it? Right on. Lets get this out of the way, your chances of building this go up if you omit the LEDs. They really get in the way and I’ve had much more success without them. If you choose to omit the and it’s highly reccomended that you do don’t mount the 220ohm resistor or LEDs.&lt;/p&gt;

&lt;p&gt;Alright, first thing you’re going to do is grab 5 10K resistors (103), solder those onto top and bottom, they’re labeled on the board but you may need a magnifying glass. Repeat this with the 220ohm resistor (221).&lt;/p&gt;

&lt;p&gt;If you are installing the LED hardware bridge the two pads together on the side with more resistors (The pads with a round marking), this enables power to flow to the LEDs, if you want to turn them off desolder this jumper.&lt;/p&gt;

&lt;p&gt;Now on the topside solder in the button, tack an edge, align it, solder it! For the LEDs there is a little arrow on the rear of the diode, The thick side of this arrow is the anode, match the thin side of the arrow with the marking on the board. Thin, in the box!&lt;/p&gt;

&lt;p&gt;Now go over every one of your connections with a magnifying glass. make sure they are forming a nice connection with their pads.&lt;/p&gt;

&lt;p&gt;Cool, every part should be on the board now. After you’ve checked your connections (did I mention to check your connections?) you should tin one pin of the staggered pads on the bottom. This is going to be where the pins will be mounted. Take your pins and cut off the amount you’ll need matching the orientation! Don’t worry about how flat they are right now. Take the board and placing it on a level surface heat the corner of the pad (not touching the soldered pin). Once the solder reflows and the pin drops flush with the board check the alignment and solder the other legs down. Repeat this process for the other two sets of pins.&lt;/p&gt;

&lt;p&gt;You should now have a fairly complete trackball. Let’s test it! Solder the headers (DON’T CLIP THE LEADS) onto the funky key on your Gergo and slot the module in. DON’T FORCE IT. If the pins are aligned wrong try moving them on the board or reheat the header connections on Gergo and massage them towards the correct alignment. If you’ve done this correctly, plugging in your TB will turn on the LEDs, if not check your connections&lt;/p&gt;

&lt;p&gt;After you have Gergo configured and QMK running enable BALLER_DEBUG and CONSOLE_ENABLE in keyboards/gergo/rules.mk, flash your firmware and run hid_listen as root. If you’ve done everything correctly there will be next to no output until you put the ball overtop of the board. If instead your cursor is drifting, check your connections.&lt;/p&gt;

&lt;p&gt;Now that your ball is half working you’ll notice a ton of jitter from it sloshing around. Apply a small bit of epoxy to the holes on either side of the button and press the ball into place. If you’ve opted to use LEDs, trim the legs down with flush cutters as much as you can before doing this.&lt;/p&gt;

&lt;p&gt;Lastly drill a hole in your least favourite keycap and mount it on there with tape or funtac. You’re going to need to get creative on that one. If you wish to level it with you keys, heat and raise the headers. Once it’s leveled and working you can now clip the leads.&lt;/p&gt;

&lt;h1 id=&quot;configuring-gergo&quot;&gt;Configuring Gergo:&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Protip&lt;/strong&gt;: Use rubbing alchol to clean up any remaing flux on your board!
If you know what you’re doing just run this&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;git clone https://github.com/qmk/qmk_firmware.git&lt;/li&gt;
  &lt;li&gt;cd qmk_firmware&lt;/li&gt;
  &lt;li&gt;make gergo:default:dfu&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are a few ways to get your firmware onto your keyboard. You can either use command line tools (recommended) or modify it online using &lt;a href=&quot;config.qmk.fm&quot;&gt;config.qmk.fm&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Otherwise you’ll want to take a watch &lt;a href=&quot;https://www.youtube.com/playlist?list=PLYEUsdlqPD2a3kzQgnF98Prj-4IzZJGYG&quot;&gt;through this tutorial&lt;/a&gt;.To modify your keymap simply modify layouts/community/ergodox/germ/layout.c with the desired keycodes from the &lt;a href=&quot;https://github.com/qmk/qmk_firmware/blob/master/docs/keycodes.md&quot;&gt;QMK Keycode List&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you have any improvements feel free to submit a pull request!&lt;/p&gt;

</description>
        <pubDate>Thu, 07 Mar 2019 00:00:00 -0600</pubDate>
        <link>http://localhost:4000/Gergo-Setup</link>
        <guid isPermaLink="true">http://localhost:4000/Gergo-Setup</guid>
        
        <category>Gergo</category>
        
        
      </item>
    
      <item>
        <title>Georgi Firmwares</title>
        <description>&lt;p&gt;&lt;strong&gt;Note: If you aren’t testing Beta Builds, you don’t want to flash these **
**You can check what your current firmware is by pressing #-TSDZ in QWERTY mode&lt;/strong&gt;&lt;/p&gt;

&lt;h1 id=&quot;alpha-02-frag-download&quot;&gt;Alpha 02, Frag: &lt;a href=&quot;/fw/georgi_0.02_Frag.hex&quot;&gt;Download&lt;/a&gt;&lt;/h1&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- Fixed Gaming mode toggle
- Seperated Num keys
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;alpha-01-ted-download&quot;&gt;Alpha 01, Ted: &lt;a href=&quot;/fw/georgi_0.01_Ted.hex&quot;&gt;Download&lt;/a&gt;&lt;/h1&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- Initial Release
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;how-to-flash&quot;&gt;How to flash&lt;/h1&gt;
&lt;p&gt;Install QMK Toolbox, download your firmware and follow &lt;a href=&quot;https://www.youtube.com/watch?v=VR53Wo9Z960&quot;&gt;this guide&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;how-to-get-devel-contribute-or-hack-on-your-chords&quot;&gt;How to get devel, contribute or hack on your chords&lt;/h1&gt;
&lt;p&gt;I maintain a branch on github for all my development work, this is where we submit PRs to QMK master from. To get it.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone https://github.com/germ/qmk\_firmware.git
git checkout georgi
make georgi:default:dfu
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you make changes, come up with funky layouts and all that. Submit a PR and we’ll merge it and bundle it together with our next push to master!&lt;/p&gt;
</description>
        <pubDate>Thu, 07 Mar 2019 00:00:00 -0600</pubDate>
        <link>http://localhost:4000/Georgi-Firmwares</link>
        <guid isPermaLink="true">http://localhost:4000/Georgi-Firmwares</guid>
        
        <category>Georgi</category>
        
        
      </item>
    
  </channel>
</rss>
