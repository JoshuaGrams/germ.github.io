{
  
  "1": {
    "title": "Building A Butterstick",
    "content": ". Give the Gergo build guide a read, this uses the same parts. Just place them according to the diagram and photo. .",
    "url": "http://localhost:4000/docs/Building%20ButterStick/",
    "relUrl": "/docs/Building%20ButterStick/"
  }
  ,"2": {
    "title": "Reference/Assembly Diagrams, Proto Firmware",
    "content": "All these boards are based on the Gergo, so follow the Gergo build guide and use these for the locations of various components! . Ginni . Gergo . GergoPlex . FaunchPad . BuzzSaw . For the Firmware grab the development jazz from my github. These keymaps will change and please submit a PR! Once they’re stable they’ll be merged into QMK master. . git clone https://github.com/germ/qmk_firmware.git git checkout gboards-update .",
    "url": "http://localhost:4000/docs/Component-References/",
    "relUrl": "/docs/Component-References/"
  }
  ,"3": {
    "title": "Configuring Georgi",
    "content": "Georgi Configuration . Awesome, now that you’ve figured out the convoluted shitshow that is Georgi, let’s get on making it usable for you! A little forward is necessary here, if you’ve used QMK before, Georgi does some very unQMK things. . The Future . We’re currently working with the QMK team to develop a front end that is compatible with the QMK configurator. Once this is done, configuring Georgi or other steno boards from the browser will be possible. Until then, we need to set up the build environment. So give this a diddle and come on back.. . Structure of a keymap . Good on you for getting that all set up! . Take a second to familarize yourself with this example keymap. Look a little funky? I told you it would be a little weird. . Let’s start with the entry point will be called during processing, processQwerty() is called anytime a Symbol or Qwerty button is to be looked up. The easiest way to think of this is as a small dictionary onboard your keyboard. In steno mode we just send the steno chords, in Qwerty mode we perform a lookup against this list. That’s literally it (for now anyway). . There are two parts to every entry a trigger and an action. . Triggers . A trigger looks like this ‘LSD | LK | LW | LR’, the pipe character is used to glue the various keys together. The first letter is the side of the board, the second the steno key it corresponds to, the exception is LSUp, LSDown, and LFT (as LT is already defined). A list is provided below. . . We will talk about triggers in a little bit again later on. . Actions . One a trigger is matched, an action is taken. Any valid C code can be in there, but usually you’ll want to use the SEND() function to press keys from the QMK Keycode List or use SEND_STRING() to output some text. SEND_STRING can also be used to send modifiers such as control, push buttons, delay and all sorts of fun stuff. A good idea is to try a small modification to a existing action before going insane :) . Callers . There are two different callers that can respond to a chord: P (Press) and PJ (Press Non Jumping). The dictionary is looked up from the top top the bottom to find the longest matching chord. Once that is found the chord is removed and the process repeats until all chords have been processed. . P is the macro we use for these definitions. . PC will add the chord specified to the rest of the chords matched in a stroke. So if you send CTRL, every other match in that chord will be sent with control. . Layers . Unlike normal QMK boards, we can get away with only using a single layer and prefixing defined chords as “layers”. This is done by a few defines at the top like so #define FUNCTION (LSU | LSD | ST3). This will create a pseudo layer prefix chord that we can use elsewhere, for example: P(FUNCTION | ST4, SEND_STRING(&quot;TEST&quot;)); would send “TEST” when LSU, LSD, ST3, and ST4 are pressed. This is used in the default keymap for layers like Media and Movement. . Special Handling . The toggles that control switching modes and all that are hardcoded. To modify these you need to jigger sten.h. . Building . Once your changes are complete, you can build your hex file by simply running make georgi from the root directory of your QMK firmware folder, this will compile and build hex files for all keymaps in the georgi folder. You can specify a keymap to build like so: make georgi:default, where default is the name of the map to build. . Have fun! .",
    "url": "http://localhost:4000/docs/Configuring-Georgi/",
    "relUrl": "/docs/Configuring-Georgi/"
  }
  ,"4": {
    "title": "Georgi Firmwares",
    "content": "Current QMK Master Build . Download Current . **Note: If you aren’t testing Beta Builds, you don’t want to flash these ** . You can check what your current firmware is by pressing #-TSDZ in QWERTY mode . Version 1.1 ClayM:Download . - Mid-QWERTY stroke improvements - Added Partial Chords - Added Sticky Bits . Version 1.1 ClayM-Flipped:Download . - Same as 1.1, but with flipped number keys as the stenographers seem to enjoy . Version 1, Stenoknight: Download . - Literally the same as the RC! . Alpha 03, TomatoSoup: Download . - Major QWERTY mode improvements, now handles continious typing - Optimized code size for extra space - Reworked chord processing backend - Removed duplicate chords . Alpha 02, Frag: Download . - Fixed Gaming mode toggle - Seperated Num keys . Alpha 01, Ted: Download . - Initial Release . How to flash . Install QMK Toolbox, download your firmware and follow this guide . How to get devel, contribute or hack on your chords . I maintain a branch on github for all my development work, this is where we submit PRs to QMK master from. To get it. . git clone https://github.com/germ/qmk _firmware.git git checkout georgi make georgi:default:dfu . If you make changes, come up with funky layouts and all that. Submit a PR and we’ll merge it and bundle it together with our next push to master! .",
    "url": "http://localhost:4000/docs/Georgi-Firmwares/",
    "relUrl": "/docs/Georgi-Firmwares/"
  }
  ,"5": {
    "title": "Gergo Setup",
    "content": "Gergo Setup . Alright! Now we’re really getting into it! . If you’ve ordered a Gergo: Ready, it’s all ready to go. With the default keymap. For customization skip down to the Configuring Gergo section. . If you have a Gergo: Partial all you need to do is solder in your switches, there’s already a firmware loaded! Just be careful when installing PCB mount switches, be sure to support the board when inserting. Here’s a video on how to solder them. . After that skip on down to the Configuring Gergo section. . Gergo: Kit Assembly . NOTE: There are some differences between Gergo: Wired (Black PCB) and Gergo: Distortion and Protocol (Blue PCB), these are noted below! . NOTE: You can enter programming mode by holding the Rightmost-Lower 1.5u (Right Shift) and plugging Gergo in (or pressing the reset) . IMAGES HERE: https://github.com/germ/GergoDocs . First and formost, I need you to take a nice deep breath. This is going to look like a lot and can be daunting! Trust me with a bit of videos and patience you can do it. Remember, this is a learning experience! . If you’ve never worked with SMD before sit down and give this video a watch. . Reccommended tools: Conical or chisel tip, flux, 0.8mm 37/63 solder, tweezers, desoldering braid, temperture controlled iron. . If you haven’t watched that video, watch it again. Because I’m not telling you exactly what to do here. . Before we do anything at all we need to clean up the board! Grab a dremel or sandpaper and smooth out the rat bites on the edge of the PCB. Wear a mask! . Diodes . We’re going to work easiest to hardest, so let’s start with the diodes. Grab them and carefully empty them into a bowl, tin the pad with a bit of solder and orientate your diode. You’re going to line these guys up under every key switch. You can tell which components are diodes by their irregular pad shape. . First, you will want to tin the square pads first. Check the image below. . . . Now, you should put the T near the square pad and let it slide to its rightful place. Do it for all of the diodes so they are lined up. . After that, you should solder the other side of the diode. . . Blue PCBs: The diodes are in three lines towards the sides of the board. All your diodes will go here instead of under every switch. . MDF PROTIP: Tin all the square pads before you start. Then heat and slide the diodes into position, finally finish up on the other side! . Caps . Next up are the capacitors, They’re the little brown guys with no markings. You have three types in this kit. . . 2x 22pf, 1x 1uf, 5x0.1uF. But, the top right component on the image above is an oscillator. . The function for capacitors is “just to save currents”. So it won’t matter the direction of how you put them. . For 22pF capacitors, you should put them around the Oscillator just like the image below. . . For 1uF capacitor, you should look around the MCU and put them on the pad which marked by 1uF like the following image. . . While the rest of the capacitors, 0.1uFs, you should look for pads which marked as such. Check this image below. . . Blue PCBs: The 0.1uF Caps are above the MCU in a line and the other is labelled at the top of your board. . Resistors . . Next up resistors, you’ve got 3 kinds 10K (103), 2.2K (222) 22Ohms (22R0). Take a look on the silk screen for them and whack em in there! They will all be near the MCU or USB port. If you see R1 on your board that’s supposed to be a 2.2K resistor! . Just like capacitors, resistors don’t care about orientation. . For 10K Ohm resistors (which has 103 label on them), you should put them to pads with 10K marks around them. . . While for 220 Ohm resistors (which has 22R0 label on them), you will want to put them around pads with 22 marks around them. . . Now, for 2.2k resistors, you should put them around pads with 2.2K marks around them. These resistors connect to the USB, so make sure you put it right. . . Osc . The little recangular guy with four pads is the oscillator, it’s a bit of a pain to solder on to be honest. Orientation doesn’t matter here, but you’ll tin one pad and slide the oscillator into place. After that get the other three legs soldered. Be careful to use as little solder as possible as this guy loves to form solder bridges! Use a continuity tester to be sure. Solder has a way of finding itself on top of the part as well, so you may need to wick that away. Note if you’re probing around in there, these diagonals are connected to each other. . . ICs . Lastly the hard stuff! Remember if you mess up, you can order more electronics from the store! . So you should have a few components left, we’re going to start with the MCP (rectangular one). There is a small circle on your PCB and a circle on the IC. Line these up, if it’s missing place the dot towards the top! . Check this image. . . Tin a pad on the top corner of it’s pads, heat and align the pins. Be careful! Too much force and you will bend a pin, too long with the iron and you may damage the chip! After it’s aligned do the same to a corner pin on the other side of the board. . Apply flux to the contacts and put some solder on the end of your iron. Do one pin at a time waiting until the solder has flowed before moving onto the next. . . Remember to check the warmth of the chip periodically! Check the pins for solder bridges and reflow/wick solder as necessary. You should be able to see gaps between the pins when viewed from the side. . Check this image for the completed result. . . Repeat the same on the MCU. There was a oversight on the silkscreen a bit of background makes it look like there are two places of pin 1. The correct placement of the dot is towards the switches. Here is a image, don’t fuck this up. Also one batch of PCBs has a huge circle instead of a tiny marker, so if you don’t see something like the following image, that giant curved line is supposed to be that tiny circle. Line it up with that image. . . Connectors . Assuming you’ve done everything correctly all that is left is the simple stuff! Attach the TRRS jacks using a good amount of solder, same for MiniUSB and the reset switch. . I really suggest you to make MiniUSB’s connection really works first before you continue to the other components. . Use flux for the MiniUSB port and be careful of bridging. If you have problems a little tip is to remove or bend the rear casing using a pair of flush cutters. It just makes getting into position much easier. Be sure to wick out any solder bridges. . . Note For Wired/Distortion: Really glob that solder on there, pull up along the body of the jack to provide a bit more support. . Blue PCBS: The reset may have two plastic pins under it, if it does clip them off before attaching the reset button . Programming/Testing . Alright, we’re in the homestretch. Go off and install these drivers or install dfu-programmer from your repo. We’re going to need them after we run through a checklist. . 1) Are there any empty pads on the board? . 2) Can you see any solder bridges between pins? . 3) Unsoldered all pads on any component? . 4) Any diodes in the wrong orientation? . 5) Blue PCBs, if you hold the board up to a bright light can you see any bridges on the ICs? . If you answered No to every one of those you’re ready to test! Install those drivers and reboot if you’re a Windows user. If you’ve done everything correctly you should see a Atmel device in Device Manager! Linux users: Run lsusb as root ( watch -n 1 lsusb ). If so, congrats, you’ve done it. Proceed to Install your switches and proceed to configuring Gergo! . If you don’t see your device . If you don’t see a device, that means you did something wrong. Step back, take a breather. Grab a coffee. Leave the board for a while. . Done that? Good. It’s the best advice. Now let’s check some things. We’re going to work backwards from the USB port to the microcontroller. . If you plug it into your USB port and another device on the same bus shuts down . That’s a short. You’ll need to find it and eliminate it, most likely a solder bridge somewhere. If your TRRS cable is connected, disconnect it and see if that solves it. . If you probe around the MCU and don’t see any voltage. . Most likely a problem connecting the USB port, check the solder connections. Might be a good idea to check the orientation of any nearby diodes . Voltage on the MCU, but not showing in Device Manager . Double check your oscillator connections. If you can’t get it to work apply a bunch of solder and gently push it off the board, clean up the board with wick and resolder the oscillator. . Something wonky is happening? . You probably have a unconnected component somewhere. Double check your connections . Still stuck? It might be time to take your board by the local hackerspace. they might be able to help you at their next open house. Otherwise hop into #kb-ergo on the mech keys discord and send me a message. . Building The Trackball . Due to popular request, I made a build video over here. . The first thing I want you to do is to asses if you can build this thing, it’s small, finicky and a pain in the ass. That being said now is a good time to asses if you’d rather pop a MX switch in there. This revision is a touch janky and jittery due to the low amount of resolution on the sensors! . Stil want to do it? Right on. Lets get this out of the way, your chances of building this go up if you omit the LEDs. They really get in the way and I’ve had much more success without them. If you choose to omit the and it’s highly reccomended that you do don’t mount the 220ohm resistor or LEDs. . Alright, first thing you’re going to do is grab 5 10K resistors (103), solder those onto top and bottom, they’re labeled on the board but you may need a magnifying glass. Repeat this with the 220ohm resistor (221). . If you are installing the LED hardware bridge the two pads together on the side with more resistors (The pads with a round marking), this enables power to flow to the LEDs, if you want to turn them off desolder this jumper. . Now on the topside solder in the button, tack an edge, align it, solder it! For the LEDs there is a little arrow on the rear of the diode, The thick side of this arrow is the anode, match the thin side of the arrow with the marking on the board. Thin, in the box! . Now go over every one of your connections with a magnifying glass. make sure they are forming a nice connection with their pads. . Cool, every part should be on the board now. After you’ve checked your connections (did I mention to check your connections?) you should tin one pin of the staggered pads on the bottom. This is going to be where the pins will be mounted. Take your pins and cut off the amount you’ll need matching the orientation! Don’t worry about how flat they are right now. Take the board and placing it on a level surface heat the corner of the pad (not touching the soldered pin). Once the solder reflows and the pin drops flush with the board check the alignment and solder the other legs down. Repeat this process for the other two sets of pins. . You should now have a fairly complete trackball. Let’s test it! Solder the headers (DON’T CLIP THE LEADS) onto the funky key on your Gergo and slot the module in. DON’T FORCE IT. If the pins are aligned wrong try moving them on the board or reheat the header connections on Gergo and massage them towards the correct alignment. If you’ve done this correctly, plugging in your TB will turn on the LEDs, if not check your connections . After you have Gergo configured and QMK running enable BALLER_DEBUG and CONSOLE_ENABLE in keyboards/gergo/rules.mk, flash your firmware and run hid_listen as root. If you’ve done everything correctly there will be next to no output until you put the ball overtop of the board. If instead your cursor is drifting, check your connections. . Now that your ball is half working you’ll notice a ton of jitter from it sloshing around. Apply a small bit of epoxy to the holes on either side of the button and press the ball into place. If you’ve opted to use LEDs, trim the legs down with flush cutters as much as you can before doing this. . Lastly drill a hole in your least favourite keycap and mount it on there with tape or funtac. You’re going to need to get creative on that one. If you wish to level it with you keys, heat and raise the headers. Once it’s leveled and working you can now clip the leads. . Configuring Gergo: . Protip: Use rubbing alchol to clean up any remaing flux on your board! If you know what you’re doing just run this . git clone https://github.com/qmk/qmk_firmware.git | cd qmk_firmware | make gergo:default:dfu | . There are a few ways to get your firmware onto your keyboard. You can either use command line tools (recommended) or modify it online using config.qmk.fm . Otherwise you’ll want to take a watch through this tutorial.To modify your keymap simply modify layouts/community/ergodox/germ/layout.c with the desired keycodes from the QMK Keycode List . If you have any improvements feel free to submit a pull request! .",
    "url": "http://localhost:4000/docs/Gergo-Setup/",
    "relUrl": "/docs/Gergo-Setup/"
  }
  ,"6": {
    "title": "Ginny and ASETNIOP",
    "content": "Unboxing Ginny . Thanks for buying one of these little guys, it’s a little wonky but I’m sure you’ll have some fun with it! . If you bought a Ready, plug in your cables. If you’re building your own use very light switches, I recommend swapping out springs to around 20gf or less! Hit the reference diagrams and Gergo Build guide if you got a kit. Trust in your flux! . Modes . This keyboard uses a modified version of the Asetniop engine. This keyboard is powered by the onboard steno engine of Georgi! As such there is a ton of overlap :) . Languages . In addition to having a chord -&gt; character keymap, Asetniop also has chords for various common words. For example if you stroke SETO your keyboard will emit “good “. There’s a whole ton of these listen on the Asetniop website and will boost your typing speed! However these are language dependent, you can configure the language used in keymaps/default/keymap.c and editing the #include for your language. . As of right now the following languages are supported: English, en-dvorak, en-colemak, Danish, Dutch, Finnish, French, German, Hungarian, Italian, Norwegian, Polishh, Portuguese, Romanian, Spanish, Swedish, Turkish. . Layout . I’m not going to cover how to use Asetniop here, instead use the online trainer to learn the map, and play this wonderful game for a bit. After that hit keybr and get grinding until your muscle memory takes over! . There are 4 layers on this board. If you’re ever stuck, just press all the keys twice! . Base (Default) . This is where all of your normal typing will happen. Letters, spaces, shifts, etc. This will be customized to your language! As well there are 9 “quick fire” binds that you can configure in your keymap.c . Numbers (ATNP) . Press ATNP (Devil horns) to switch to numeric/symbol input mode. This is the same as on the Asetniop site and is language agnostic . Commands (ESIO) . Press ESIO to switch to your command layer, this has Control, Alt, Meta, Function Keys, etc. Refer to gen/aset/cmd-keymap.c . User (ASETNIOP) . Press ASETNIOP to switch to your user layer, these are configured directly in your keymap.c. Put any kind of text macros, frequent shortcuts, passwords, in this layout. . Command Mode (ETNI) . Due to the size of the board, key combos can be a pain if there is a conflict. What do you do when the key you’re trying to chord overlaps with another that you need? Enter Command mode. Command mode buffers all of the keys that are pressed while it’s active; once you exit command mode the keys are all pressed down, and then released in one go. So inserting say ‘Ctrl+Shift+S’ could be done in the following way ‘Command Mode/Ctrl/Shift/S/Command Mode’. . Note: There are a good number of alternative binds for modifiers and you can always add definitions to your firmware! If you find a bind that you’re using frequently, don’t just whack it in over and over again in command mode, add it to your keyboard! .",
    "url": "http://localhost:4000/docs/Ginny/",
    "relUrl": "/docs/Ginny/"
  }
  ,"7": {
    "title": "Hacking Georgi",
    "content": "Hacking Georgi . Alright, so you’ve finally found something that you can’t do from the default firmware. A bit of heads up here, you’re going to need to know some QMK internals so give this excellent guide a read and come on back. . How Georgi Do . Pop open sten.h so you have a reference to use. Everything that Georgi does is independent of QMK proper and happens in here and processQwerty() in the keymap. The current chord state is held in a cChord. We hook process_steno_user to update this chord as keys come in and hook send_steno_chord_user to process everything once the keys are up. If none of our actions match we return true and continue processing (QMK will then send the steno codes). . cChord . This is just a bigass bitfield that is set in process_steno_user we can add keys to this easily but there are a total maximum of 32 possible states we can jam in there. To define your own codes, append an entry to the ORDER enum, make a nice pretty #define for it, and start adding entries to your keymap. . Key Repeat . Once the first button press comes in we start a timer and keep checking it in matrix_scan_user, if this timer expires we send the lookup the current chords and reset the timer. You can adjust this timer by changing the REP_DELAY #define in sten.h. . CLICK_MOUSE() . Mousekeys are done using the repeat mechanism, if a mousepress is sent it will remain in a down state until the chord is sent. The button that is clicked is selected from this list here. If the chord is too short to register a repeat a single click is generated. . SEND() . Send is just a light wrapper around register_code(), this is needed to buffer if we are in command mode. Just like register_code() Quantum Codes cannot be used here. You need to use SEND otherwise command mode won’t work! . SET_STICKY() . When this chord is matched a sticky bit is set in cChord. The usual way you would use this is with the codes RES1 and RES2. When the sticky bit is set cChord will process all incoming chords with this. Use cases are similar to changing the default layer in QMK. Using sticky bits you could toggle between QWERTY and WORKMAN and whatnot. To clear any stickybits that have been set, pass 0 when calling it. . SWITCH_LAYER() . This is a helper that jumps to the specified QMK layer, if it exists. Returning to the default layer is left as a excercise to the reader. . Command mode . The buffer can store up to 20 different keypresses (if you somehow need more, update REP_DELAY). The way we do this is by wrapping register_code() with send and replaying the buffer, depressing every key in the sequence before key up. This only applies to wrapped codes so things like mouse clicks and custom code won’t be in there. . QWERTY Fallback . proessFakeSteno() simply maps chords to NKRO Plover as a fallback mode. Ideally we would have a datastructure for various dictionaries but switching the called lookup table seems to be fine. This is a young project, submit a PR. . Adding functionality . All of the logic happens in process_steno_chord_user, this should be your main place to add/augment functionality. In here you can preprocess chords before passing them off for handling, enable toggles, disable features, etc. You need to remember that just like in any dictionary, there is a order that everything is evaluated in, so be careful. . Two exit points are provided to jump to, out which halts further processing and cleans up, and steno which will clean up and pass off the chords to Plover. Local gotos are okay, get at me. . Other QMK jazz . There’s a ton of stuff that can be leveraged here. Take a look through the tmk/common folder for some ideas and weird whacky keyboards you see around. This is a computer, make it do weird shit! If you need a hand reach out, I’ll warn you I suck at steno though. .",
    "url": "http://localhost:4000/docs/Hacking-Georgi/",
    "relUrl": "/docs/Hacking-Georgi/"
  }
  ,"8": {
    "title": "Meeting Butterstick",
    "content": "Unboxing Butterstick . Thanks for buying one of these little guys, it’s a little wonky but I’m sure you’ll have some fun with it! . In your package you should have recieved a populated PCB ready for your switches and caps. Go ahead and get those installed if you have not! A note, try and use lighter switches then you would normally. Gateron Clears are a good start or any MX spring swapped down to 20cN should be perfect. . Modes . There is a ton of overlap with the Georgi firmware, after you get your board set up and start mucking about with your FW go read Hacking Georgi. . This is the default layout, for keys inbetween press both keys to trigger it. For the blue circles, all four in that area. . Update: Backspace is VBNM! Forgot to include it in the maps . . There are a few other ‘layers’ as well, the coloured keys are the prefix for the chord! . Command Mode . Due to the size of the board, key combos can be a pain if there is a conflict. What do you do when the key you’re trying to chord overlaps with another that you need? Enter Command mode. Command mode buffers all of the keys that are pressed while it’s active; once you exit command mode the keys are all pressed down, and then released in one go. So inserting say ‘Ctrl+Shift+S’ could be done in the following way ‘Command Mode/Ctrl/Shift/S/Command Mode’. . Note: There are a good number of alternative binds for modifiers and you can always add definitions to your firmware! If you find a bind that you’re using frequently, don’t just whack it in over and over again in command mode, add it to your keyboard! . Entering QMK (Gaming mode) . Pressing this chord will move to the next avalible QMK layer (or do nothing if you only have the base layer). This layer acts like a traditional keyboard as opposed to stenotype. On this layer are your traditional WASD. You may want to modify this to suit your gaming needs. To exit back to normal mode press the right bottom corner button. . Protips . Do yourself a favour and print off the keyboard map and leave it by your desk. This little guy is a radical departure from usual keyboards and with any new map, it’s going to take some getting used to. Looking stuff up is to be expected for the first bit and getting used to the keyboard itself is going to take a while even for existing stenographers! | .",
    "url": "http://localhost:4000/docs/Meet-Butter-Stick/",
    "relUrl": "/docs/Meet-Butter-Stick/"
  }
  ,"9": {
    "title": "Unboxing Georgi",
    "content": "Unboxing Georgi . Congrats on the purchase of your Georgi! Let’s get the little guy all set up. . In your package you should have a little note from me, the two halves of Georgi and any cables you may have ordered. If you didn’t order cables from me you will need a MiniUSB and a TRRS cable (Looks like a headphone connector, but has 4 gold bands instead of 3!). . Now go ahead and plug everything in! Be gentle on the cabling for the first few inserts as it can be a little tight until it wears in. Plug it into your computer, fire up Plover, open your machine settings, and scan and select the correct serial port. That’s it! . Your board is now ready for use with Plover, but you might accidentally toggle a few modes that are inside of Georgi, so let’s go over them. . Remember! If you have issues, unplugging your board and plugging it in will reset to a clean state. If using a non rev2 or higher board, be gentle on the TRRS jacks! . Modes . Georgi has three operation modes: Steno, QWERTY and Command. . Lets start with Steno. If you’re using a Georgi you’re probably familiar with this already. If not, The Art Of Chording has you covered.. . The QWER button toggles QWERTY mode, if you ever accidentally can’t type you probably hit that. The SYMB button is a Momentary hold for symbols, you have to hold it while inserting them! . We’ll go on about that later but for now know that you can hold either of those in steno mode for fingerspelling or inserting symbols! . QWERTY mode is the main mode you’ll be in if you’re not doing steno 24/7. Here’s the keymap Pretty similar to a standard QWERTY eh? The markings along a crack denote pushing both of those keys in a chord, a blue dot is for the four centered around it. The main difference between this and a normal board is that a traditional keyboard sends keypresses as they’re depressed, this one sends the key only after the chord has been stroked! . It’s a little weird and may take a few days to get used to the timing difference. Stick with it. The numbers can be accessed from QWER mode by simply holding num (BSPC). . The symbols layer is accessed by holding down the Symbol key and cannot be switched to. Some of these keys can be shifted just like their QWERTY counterparts and to do that you hold the right shift key! The number layer is accessed by holding the number key while pressing the key. Usually it’s easier to insert numbers directly from the QWERTY layer! . There are a few other ‘layers’ as well, the coloured keys are the prefix for the chord! There are some chords tucked away on the thumbs as well on the bottom :) . Fallbacks . Georgi uses GeminiPR for serial communication, this is what allows you to quickly toggle back and forth between Plover and QWERTY input. However this isn’t always an option (work machine, limited environment, etc). So for these kind of situations the Steno layout can be used as a simple NKRO keyboard for plover. If you need this, remember to have a stroke for enabling/disabling plover in your dictionaries! Otherwise when you switch to QWERTY mode, plover will still be active! . . Command Mode . Due to the size of the board, key combos can be a pain if there is a conflict. What do you do when the key you’re trying to chord overlaps with another that you need? Enter Command mode. Command mode buffers all of the keys that are pressed while it’s active; once you exit command mode the keys are all pressed down, and then released in one go. So inserting say ‘Ctrl+Shift+S’ could be done in the following way ‘Command Mode/Ctrl/Shift/S/Command Mode’. . . Note: There are a good number of alternative binds for modifiers and you can always add definitions to your firmware! If you find a bind that you’re using frequently, don’t just whack it in over and over again in command mode, add it to your keyboard, find an alternate way to stroke it or use plover to bridge the gap! . Entering QMK (Gaming mode) . . Pressing this chord will move to the next avalible QMK layer (or do nothing if you only have the steno layer). This layer acts like a traditional keyboard as opposed to stenotype. On this layer are your traditional WASD and a momentary layer for numbers/lower qwerty. To return to steno press the right number key. . Configuration with Plover . Unless in fallback mode, Georgi uses GeminiPR to communicate with Plover. Because of this you do not have to disable Plover to use Georgi as a keyboard. To set it up go into Configure &gt; Machine Settings &gt; GeminiPR and Scan for the device. Select the correct serial port from the dropdown. . . In addition you may need to install these drivers . Protips . Do yourself a favour and print off the keyboard map and leave it by your desk. This little guy is a radical departure from usual keyboards and with any new map, it’s going to take some getting used to. Looking stuff up is to be expected for the first bit and getting used to the keyboard itself is going to take a while even for existing stenographers! | You can do temporary plover from QWERTY if you hold the STENO button in your chord. Use this for sending shortcuts to plover for binds and other stuff. | Similarly you can do temporary QWERTY fingerspells from steno! Hold the STENO button while you’re typing. | .",
    "url": "http://localhost:4000/docs/Unboxing-Georgi/",
    "relUrl": "/docs/Unboxing-Georgi/"
  }
  ,"10": {
    "title": "Home",
    "content": "gBoards: Docs . Welcome! If you’re here, you’ve probably picked up one of my boards and are trying to figure it out. Good on you! Hit the nav for anything you need otherwise reach out . The Combo/Chording Engine docs can be found over at combos.gboards.ca Currently I’m migrating boards over to this new system. . Twitter Email Github .",
    "url": "http://localhost:4000/",
    "relUrl": "/"
  }
  
}